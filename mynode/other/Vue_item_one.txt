第一个Vue项目复盘：

准备阶段：使用vue-cli创建一个vue项目。
确定目录：
    index.js
    -scr
        main.js
        App.vue
        -components
            header.vue
            footer.vue
        -pages
            layout.vue
            details.vue
            -details
                coffee.vue
                hamburger.vue
                salad.vue
                sandwich.vue
                -components
                    Checkboxs.vue
                    Counter.vue
                    Navlist.vue
        -router
            index.js
        -assets
            logo.png
            -images
                1.png
                2.png
                3.png
                4.png
            -slideShow
                1.jpg
                2.jpg
                3.jpg
                4.jpg
    -store
        index.js

一：顶部 + 底部 + 布局左上
    创建两个名为header.vue、footer.vue的组件，并写入内容。
    在App引入，并在实例中注入，在模板中调用<App />。
    在App实例写入vm.data数据，以数组的方式写入。如：data () {return {  content: [arr...]  }}
    在App通过模板调用的组件<App />标签添加自定义属性创建接口。如：<App :pro="content" />
    在组件实例vm.props连接来自父组件的接口，添加pro，以数组或对象的形式都行。
        如：props: ["pro","pro2"...]
           props: {pro:{type:Array,default () { return["默认内容“,"普通类型直接冒号，obj和arr要用函数返回"...] }}}
    Vue使用到：
        import ... from ...
        data
        components
        props
        v-for
        v-if

二：最新消息
    为跨域获取内容，需安装axios解决跨域问题。
    安装：cnpm install --save-dev axios
    引入：import Axios from "axios"
    全局配置：Vue.prototype.$axios = Axios
    代理：Vue.portotype.HOST = "/api"
    全局配置：Axios.defaults.baseURL = 'http://www.wwtliu.com'
            Axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'
    请求拦截器：  // 添加请求拦截器
                Axios.interceptors.request.use(function (config) {
                    if (config.method === 'post') {
                        config.data = config.stringify(config.data)
                    }
                    return config
                }, function (error) {
                    // 对请求错误做些什么
                    return Promise.reject(error)
                })
                // 添加响应拦截器
                Axios.interceptors.response.use(function (response) {
                    return response
                }, function (error) {
                    // 对响应错误做点什么
                    return Promise.reject(error)
                })
    在vm.data创建news空数组，并通过指定链接获取内容。
    在钩子函数created，即刚创建好该组件就为news添加内容。
        this.$axios
                    .get("http://111wwtliu.com/sxtstu/news/juhenews.php", {
                        params: {
                            count: 10,
                            type: "top"
                        }
                    })
                    .then(res => {
                        this.news = res.data.result.data.filter(function(item, index) {
                            return index < 10;
                        });
                    })
                    .catch(error => {
                        console.log(error);
                    });
    Vue使用到：
        created
    Axios使用到：
        （如上~）
    
三：轮播图
    改变战略，使用饿了么来写轮播器。
    安装：cnpm i element-ui --save
    引入： 在main.js内引入
            import ElementUI from 'element-ui';
            import 'element-ui/lib/theme-chalk/index.css';
            Vue.use(ElementUI);
    使用：
        <el-carousel :interval="4000" type="card" height="300px">
          <el-carousel-item v-for="(n,index)  in displayImg" :key="index + 'elezoumadeng'">
            <img :src="n.src" :alt="n.name" style="width:100%;height:100%">
          </el-carousel-item>
        </el-carousel>
    修改内容：v-for循环的内容、添加img标签、并为img设置动态属性:src。
    
四：路由 详情页面
    使用路由：
        在main.js引入
            import router from './router'
            为实例注入router
        在router目录下的index.js配置所有内容
            import Vue from 'vue'
            import Router from 'vue-router'
            import Layout from '@/pages/layout' //引入各个组件
            import Details from '@/pages/details' //引入各个组件
            import Sandwich from "@/pages/details/sandwich" //引入各个组件
            Vue.use(Router)
            export default new Router({
            routes: [{  //路由规则，arr形式，若为同级则","隔开，若为子级，则在该对象添加children。
                path: '/', //路径
                name: 'Layout', //名称
                component: Layout //组件(上面引入的)
            }, {
                path: '/details',
                name: 'Details',
                component: Details,
                redirect: "/details/sandwich", //重定向，如果地址是.../details，则重定向为子路由.../details/sandwich
                children: [{    //配置子路由规则
                path: '/details/sandwich',
                name: 'Sandwich',
                component: Sandwich
                }]
            }]
            })
        在原页面设置跳转
            <router-link to="/details">点我跳转</router-link>
        若跳转至子路由则需要
            <router-view /> 该标签以显示子路由内容。
            多个可跳转的<router-link>可为其添加激活状态的class，如active-class="yourclass"
        注：同级和子级的区别：同级直接跳转，自己的东西全都不要了。子级会有个标签<router-view />承载子级的内容，而本身没变化。

五：自己写组件
    创建过程：（略）
    主要用到：
        实例：
            props: { /*接收父组件数据以及默认值*/ }
            methods : {  /*写各种函数*/ }
            mounted: { /*初始化*/ }
        模板：
            v-for
            v-on
            v-bind
            v-show
六：引用同样类型的element-ui
    就这样用，很简单。

知识点：
    1、组件的css样式style标签添加scoped，即设置其“作用域”仅在该组件生效。如：<style scoped>...</style>
    2、引入组件的步骤：
        (1)创建组件，并为组件设置一个name:"App"。
        (2)引入组件，在需用到组件的地方引入，如：import App from './components/App'
            注：第一个App为组件名称，第二个App为文件名，尽量统一。(vue后缀可省略)
        (3)注入组件，在引入组件的实例下添加vm.components内可用数组或对象形式。如:components: { App }
        (4)调用组件，在template模板以组件名的方式使用组件，如：<App />
    3、 v-bind 简写 :
        v-on   简写 @
    4、生命周期函数（钩子函数）：
        创建：beforeCreate created
        安装：beforeMount mounted
        更新：beforeUpdate updated
        销毁：beforeDestroy destroyed
    5、使用img标签的动态src属性，引用绝对路径的路径数据需要添加require。如：src: require("../assets/1.jpg")
    6、<router-link>标签属性：
            tag="li"  可以渲染成指定标签。
            active-class="yourclass"  指定目标的子路由被激活。
    7、父子组件传值
        父==>子
            父组件以动态属性的方式，如：<component-someone  :pro="data_someone" />
            子组件以props: { pro:{ type:String/Array... , default: "默认值" } }接收数据，在子组件直接this.pro直接调用。
        子==>父
            子组件自定义事件，如this.$emit("yourevent","传个值")
            父组件可使用v-on监听该事件，如<component-someone @yourevent="fatherMethod" /> 监听子组件事件并触发父组件方法。
    8、Vuex 数据仓库(全局数据)
        安装：npm install vuex --save
        简单使用：
            在main.js
                引入
                    import vuex from 'vuex'
                使用
                    Vue.use(vuex);
                实例化一个vuex的store
                    var store = new vuex.Store({//store对象
                        state:{
                            show:false
                        }
                    })
                在实例化Vue对象添加store对象
                    new Vue({
                        el: '#app',
                        store,//使用store
                    })
                即可在所有组件中使用$store.state.show这个false的值。
        复杂使用：
            在项目目录下(与src同级)创建一个store/index.js
                import Vue from "vue"
                import Vuex from "vuex"
                Vue.use(Vuex)
                export default new Vuex.Store({
                    state: {
                        show:false
                    }
                })
            在main.js引入该store
                import store from '../store'
                new Vue({
                    el: '#app',
                    store,//使用store
                })
            即可在所有组件中使用$store.state.show这个false的值。
        复杂使用＋数据的模块化：
            在store建一个数据文件(otherData.js):
                export default {
                    state: {
                        hide: true
                    }
                }
            在store/index.js里引入并使用。
                import otherData from "./otherData.js"
                export default new Vuex.Store({
                    state: {
                        show:false
                    }
                    modules: {
                        otherData : otherData //导入该模块数据
                    }
                })
            在任意组件试试console.log(this.$store)看看吧。
        详解：
            state：和Vue实例的data一样，存放内容(变量)。
                调用方法：$store.state.show （在视图如<a v-show="$store.state.show" href="...">baidu</a>，若是在则要在前面加上this，下同）
            getters：和Vue实例的computed一样，放置需计算的变量。
            mutations：和Vue实例的methods一样，放置方法。
                调用方法：$store.commit("store_someone_mutation",payload) (其中payload为传入的参数)
                方法规范：store_someone_mutation (state,payload) {
                                console.log( "state为本身的数据" , state.show );
                                console.log( "payload为引用是传的参数" , payload );
                            }
            actions：由于mutations只能同步，于是actions孕育而生，管理mutations，且是异步的。
                调用方法：$store.dispatch("changegoodsname",payload) (其中payload为传入的参数)
                方法规范：store_someone_mutation(state,payload){
                            console.log("来自" + payload + "页面触发actions，并通过本方法调用mutations的store_someone_mutation方法");
                            state.commit('store_someone_mutation','actions')
                        }
                //区分 actions 和 mutations 并不是为了解决竞态问题，而是为了能用 devtools 追踪状态变化。
                //事实上在 vuex 里面 actions 只是一个架构性的概念，并不是必须的。
                //*说到底只是一个函数，你在里面想干嘛都可以，只要最后触发 mutation 就行。异步竞态怎么处理那是用户自己的事情。
                //vuex 真正限制你的只有 mutation 必须是同步的这一点
            modules：模块化开发，将其他数据统一到$store。
                先引入，如：import otherData from "./otherData.js"
                再添加，如：modules: { otherData: otherData }
                注意：
                    1.如果模块数据的写法，export default { state:{ hide:false },getters:{},mutations:{}... }
                    2.模块数据的state会被限制在$store.state.otherData.hide，而其他的则不会。
    9、Vue注意篇：
        1.对数组arr直接修改
            直接通过arr[index]=newValue修改数组 或 直接arr.length = newLength Vue不会实时刷新。
                由于JaveScript的限制，一下两种方式都不会被页面实时更新。
                    vm.items[indexOfItem] = newValue	直接用引索修改特定在值
                    vm.items.length = newLength		直接修改其长度。
            替代方法
                修改特定的值
                    1. vm.items.splice(index, 1, newVale);
                    2. vm.set(vm.items, index, newValue);
                    3. vm.$set(vm.items, index, newValue); (是2.全局方法的别称)
                修改长度
                    1. vm.items.splice(newLength);
        2.对对象obj直接修改
            直接通过obj[newKey]=newValue修改对象 Vue不会实时更新。
                由于JaveScript的限制，一下两种方式都不会被页面实时更新。
                    vm.obj[newKey] = newValue;	直接为对象定义一个新属性。
            代替方法E
                1. vm.set(vm.obj, "newKey", "newValue");
                2. vm.$set(vm.obj, "newKey", "newValue");(是1.全局方法的别称)
                3. 添加多个对象，ES6方法:Object.assign()
                    vm.obj = Object.assign({},vm.obj,obj2);