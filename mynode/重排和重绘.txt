重绘(repaint或redraw)：
    仅外观改变，其盒子位置大小等不变的情况下，对元素的新属性进行重绘。
    注意：table及其内部元素可能需要多次计算才能确定好其在渲染树中节点的属性值，比同等元素要多花两倍时间，这就是我们尽量避免使用table布局页面的原因之一。
重排(重构/回流/reflow)：
    元素的规模尺寸，布局，隐藏等改变而需要重新构建的行为。页面第一次加载必会有一次重排，再重绘。
    注意：每次重排(或重构/回流/reflow)后必回再进行重绘。
    触发重排的条件：任何页面布局和几何属性的改变都会触发重排。
        如：1、页面渲染初始化；(无法避免)
        　　2、添加或删除可见的DOM元素；
        　　3、元素位置的改变，或者使用动画；
        　　4、元素尺寸的改变——大小，外边距，边框；
        　　5、浏览器窗口尺寸的变化（resize事件发生时）；
        　　6、填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变；
        　　7、读取某些元素属性：（offsetLeft/Top/Height/Width,　clientTop/Left/Width/Height,　scrollTop/Left/Width/Height,　width/height,　getComputedStyle(),　currentStyle(IE)　)

浏览器运行机制：
    1、构建DOM树（parse）：【分析所有节点 .html+.js】
        渲染引擎解析HTML文档，首先将标签转换成DOM树中的DOM node（包括js生成的标签）生成内容树（Content Tree/DOM Tree）；
    2、构建渲染树（construct）：【获取所有css .html+.css+.js】
        解析对应的CSS样式文件信息（包括js生成的样式和外部css文件），而这些文件信息以及HTML中可见的指令（如<b></b>），构建渲染树（Rendering Tree/Frame Tree）；
    3、布局渲染树（reflow/layout）：【计算每个元素】
        从根节点递归调用，计算每一个元素的大小、位置等，给出每个节点所应该在屏幕上出现的精确坐标；
    4、绘制渲染树（paint/repaint）：【渲染】
        遍历渲染树，使用UI后端层来绘制每个节点。

减少重绘和重排的优化方案：*减少并合并DOM操作和Style样式请求。
    1、直接一次性改className。
    2、先display：none;再各种修改后，再display:block;。
    3、使用cloneNode(true or false)和replaceChild。
    4、使用postion属性设置为absolute或fixed，使元素脱离文档流。
    5、使用DocumentFragment(节点碎片)打包要添加的节点后一次性加入到document。
    6、尽量不要使用table布局。
