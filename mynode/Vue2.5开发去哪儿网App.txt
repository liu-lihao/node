基础知识笔记：
1.对数组arr直接修改
    直接通过arr[index]=newValue修改数组 或 直接arr.length = newLength Vue不会实时刷新。
        由于JaveScript的限制，一下两种方式都不会被页面实时更新。
            vm.items[indexOfItem] = newValue	直接用引索修改特定在值
            vm.items.length = newLength		直接修改其长度。
    替代方法
        修改特定的值
            1. vm.items.splice(index, 1, newVale);
            2. vm.set(vm.items, index, newValue);
            3. vm.$set(vm.items, index, newValue); (是2.全局方法的别称)
        修改长度
            1. vm.items.splice(newLength);
2.对对象obj直接修改
    直接通过obj[newKey]=newValue修改对象 Vue不会实时更新。
        由于JaveScript的限制，一下两种方式都不会被页面实时更新。
            vm.obj[newKey] = newValue;	直接为对象定义一个新属性。
    代替方法E
        1. vm.set(vm.obj, "newKey", "newValue");
        2. vm.$set(vm.obj, "newKey", "newValue");(是1.全局方法的别称)
        3. 添加多个对象，ES6方法:Object.assign()
            vm.obj = Object.assign({},vm.obj,obj2);
3.组件的data全都要通过函数返回，因为组件是可以复用的，避免数据混淆。
4.ref
    在html标签上使用，如<div ref="one"></div>
        在逻辑层this.$refs.名字，得到该标签节点对象。
    在组件标签上使用，如<zujian ref="two" />
        在逻辑层this.$refs.名字，得到该组件实例对象。

5.props
    写法1：props: ['content']
    写法2：props: {
            content:[Number,String]
        }
    写法3：props: {
        content:{
            type:Number,
            required:false,
            default:5
        }
    }
    写法4：props: {
        content:｛
            type: String,
            validator (value) {
                return (value.length > 5)
            }
        ｝
    }
6.给组件绑定原生事件
    背景：<zujian @zidingyievent="fn" />
        zidingyievent事件，是由组件触发this.$emit("zidingyievent","payload");
    若需要为组件添加点击事件：<zujian @click="fn" />
        click会被误认为是组件内部的自定义事件。
    因此，修饰符.native的作用就是区分这种误解：
        <zujian @click.native="fn" />
7.非父子组件传值
    Vuex：详见Vue_item_one.text
    观察者模式：
        创建一个第三方观察者：Vue.prototype.bus = new Vue();
        组件通过this.bus.$emit("zidingyiEvent","payload");
        以及this.bus.$on("zidingyiEvent",function(payload){});
8.插槽
    <zujian>
        <h1 slot="header">标题</h1>
        <p>正文</p>
        <em slot="footer">落款</em>
    </zujian>
    -----
    template:`
        <div>
            <slot name="header">默认内容，如果没有header的话</slot>
            <slot></slot>
            <slot name="footer">默认内容，如果没有footer的话</slot>
        <div>	
    `
9.插槽作用域
    <zujian>
        <template slot-scope="props">
            <li>{{ props.item }}</li>	
        </template>
    </zujian>
    -----
    data(){return{ list:[1,2,3,4] }}
    template:`
        <div>
            <ul>
                <slot
                    v-for="item in list"
                    :item=item
                ></slot>
            </ul>
        </div>
    `
10.动态组件
    <component :is="title"></component>
    ---
    data{ title:"组件名" }，对title更改不同的组件名，该动态组件也会接着更改。
11.v-once
    <p v-once>{{ msg }}</p>
    <p>{{ msg }}</p>
    ---
    data{ msg:"内容" }，对msg更改内容，上方有v-once的内容不会改变，会被当成静态内容。
12.动画
    1).动画入门
        <transition>
            <div v-show="show">666</div>
        </transition>
        ----
        .v-enter, .v-leave-to { opacity:0; }
        .v-enter-to, .v-leave { opacity:1; }
        .v-enter-active, .v-leave-active { transition: opacity 1s; }
        ----
        为一个标签添加动画，只需加上<transition></transition>
        在添加css样式：   .v-enter 动画开始前(leave同理)
                        .v-enter-active 动画过程(leave同理)
                        .v-enter-to 动画结束(leave同理)
        注：<transition>标签下只能有一个根目录
            <transition name="fade">添加name属性后将css样式的class类名的v跟换为fade，如fade-enter
    2).动画进阶
        介绍一下CSS自带的：
            @keyframes myanimationname { 0%{} 100%{} }
            调用方式: #box { animation:myanimationname 1.5s;  }
            关于animation属性的值，详见http://www.w3school.com.cn/cssref/pr_animation.asp。
        结合Vue动画：
            v-enter-active {
                animation: myanimationname 1.5s;
            }
            v-leave-active {
                animation: myanimationname 1.5s reverse;
            }
        动画类名除这种写法.v-enter外，还支持自定义：
            <transition 
                enter-class="yourclassname1"
                enter-active-class="yourclassname2"
                enter-to-class="yourclassname3"
                leave-class="yourclassname4"
                leave-active-class="yourclassname5"
                leave-to-class="yourclassname6"
            >
            直接.yourclassname1 {} 即可。
    3).动画 animate.css
        下载并引用该css：https://daneden.github.io/animate.css/
        使用方法:无需自己写style，直接： （动画效果：详见链接内的效果与名称）
            <transition 
                enter-active-class="animated 动画效果"
                leave-active-class="animated 动画效果"
            >
        与Vue的过渡动画同时使用：
            <transition 
                name="fade" //建议写上个名称
                enter-active-class="animated 动画效果 fade-enter-active"
                leave-active-class="animated 动画效果 fade-leave-active"
            >
            再添加css样式：.fade-enter-active{} 与 .fade-leave-active {}
            but，Vue的过渡动画结束时间与animate.css动画结束时间问题：
                设置以谁的时间为准：
                    <transition 
                        type="animation" //或"transition"
                    >
                自定义结束时间：
                    <transition 
                        ：duration="5000" 或 {enter:5000, leave:6000}
                    >
    4).动画钩子函数
        为<transition>标签添加钩子函数：
            <transition
                @before-enter="handleBeforeEnter"   //leave同理
                @enter="handleEnter"                //leave同理
                @after-enter="handleAfterEnter"     //leave同理
            >
            ---
            handleBeforeEnter(el){
                console.log("handleBeforeEnter","变色之前");
            },
            handleEnter(el,done){
                //done 为回调函数，类型是fn，在执行done()后立马触发handleAfterEnter();
                //在此处即可执行动画函数，自己写或利用Velocity.js等js动画框架，在动画执行完后，调用done()即可。
                console.log("handleEnter");
                function changebgc(){
                    let color_num = 0;
                    let color_arr = ["red","orange","yellow","green","cyan","blue","purple"]
                    return function(el){
                        if(color_num<=6){
                            el.style.backgroundColor = color_arr[color_num];
                            color_num++;
                            let that = arguments.callee;
                            setTimeout(function(){
                                that(el);
                            },1000);
                        }else {
                            done();
                        }
                    }
                };
                changebgc()(el);//运用闭包
            },
            handleAfterEnter(el){
                console.log("handleAfterEnter");
            }
    5).动画组
        <transition-group>标签，为里面的每一项添加<transition>标签。
        注意事项：主要用在v-for中，而且必须加key，避免dom节点复用，导致动画异常。
13. @
    地址出现@符号代表src目录